
class : cl_evnt definition deferred.

data  : wa_scat type slis_fieldcat_alv,
        wa_fcat type lvc_s_fcat,
        wa_lout type lvc_s_layo.

data :   it_scat like table of wa_scat,
         it_fcat like table of wa_fcat,
         lo_disp type ref to cl_gui_alv_grid,
         lo_evnt type ref to cl_evnt.

class cl_evnt definition final.
  public section.
    methods :  handle_data_changed
               for event data_changed of cl_gui_alv_grid
               importing er_data_changed
                         e_onf4
                         e_onf4_before
                         e_onf4_after
                         e_ucomm.
endclass.

class cl_evnt implementation.

  method handle_data_changed.

    perform handle_data_changed
      using er_data_changed
            e_onf4
            e_onf4_before
            e_onf4_after
            e_ucomm.
  endmethod.
endclass.

form pfs_stat using rt_extab type slis_t_extab.
  set pf-status 'ZSTD'.

  if lo_disp is initial.
    call function 'GET_GLOBALS_FROM_SLVC_FULLSCR'
        importing e_grid = lo_disp.

    call method lo_disp->check_changed_data.

    if lo_evnt is initial.
      create object lo_evnt.
      set handler lo_evnt->handle_data_changed  for lo_disp.
      call method lo_disp->register_edit_event
        exporting i_event_id = cl_gui_alv_grid=>mc_evt_modified.
    endif.
  endif.
endform.

form handle_data_changed using er_data_changed type ref to
cl_alv_changed_data_protocol
                               e_onf4          type char01
                               e_onf4_before   type char01
                               e_onf4_after    type char01
                               e_ucomm         type sy-ucomm.

    data : wa_cell type lvc_s_modi,
           wa_rows type lvc_s_row,
           wa_xcol type lvc_s_col.

endform.
form usr_comm using r_ucomm like sy-ucomm
                    s_field type slis_selfield.

  call method lo_disp->check_changed_data.

  case r_ucomm.
  endcase.
endform.  "user_command

form disp_data.

  perform read_scat.
  perform conv_scat.
  perform chng_fcat.
  perform read_lout.

 call function 'REUSE_ALV_GRID_DISPLAY_LVC'
    exporting
      i_callback_program       = sy-repid
      i_callback_pf_status_set = 'PFS_STAT'
      i_callback_user_command  = 'USR_COMM'
*      i_callback_top_of_page   = 'TOP_OF_PAGE'
      i_bypassing_buffer       = 'X'
      it_fieldcat_lvc          = it_fcat
      is_layout_lvc            = wa_lout
      i_save                   = 'A'
    tables
      t_outtab                 = it_disp
    exceptions
      program_error            = 1
      others                   = 2.
endform.


form read_scat.

  call function 'REUSE_ALV_FIELDCATALOG_MERGE'
    exporting
      i_program_name         = sy-repid
      i_inclname             = sy-repid
      i_internal_tabname     = 'WA_DISP'
    changing
      ct_fieldcat            = it_scat
    exceptions
      inconsistent_interface = 1
      program_error          = 2
      others                 = 3.

endform.
form conv_scat.
  call function 'LVC_TRANSFER_FROM_SLIS'
    exporting
      it_fieldcat_alv = it_scat
    importing
      et_fieldcat_lvc = it_fcat
    tables
      it_data         = it_disp
    exceptions
      it_data_missing = 1
      others          = 2.


endform.

form chng_fcat.
  loop at it_fcat into wa_fcat.
    case wa_fcat-fieldname.
        when 'MATNR101'.
         wa_fcat-reptext = 'Material 101'.
        when 'MATNR261'.
         wa_fcat-reptext = 'Material 261'.
        when 'MATNR531'.
         wa_fcat-reptext = 'Material 531'.
       when 'MENGE101'.
         wa_fcat-reptext = '101 Qty'.
       when 'MENGE261'.
         wa_fcat-reptext = '261 Qty'.
       when 'MENGE531'.
         wa_fcat-reptext = '531 Qty'.
       when 'BASE_QTY'.
           wa_fcat-reptext = 'Base Qty As per BOM'.
       when 'CONSUP_QTY'.
           wa_fcat-reptext = 'Consumption Qty As per BOM'.
       when 'SCRAP_QTY'.
          wa_fcat-reptext = 'Scrap Qty AS per BOM'.
       when 'CALC_BOM_QTY'.
        wa_fcat-reptext = 'Calc BOM Scrap as Order Qty'.
       when 'DIFF_QTY'.
        wa_fcat-reptext = 'Diff in actual and BOM in Scrap'.
       when  'SCRAP_%'.
        wa_fcat-reptext = 'Scarp % as per   BOM scrap'.
       when 'SCRAP__BOM%'.
        wa_fcat-reptext = 'As per BOM Scrap %'.
       when 'SCRAP__ACT%'.
        wa_fcat-reptext = 'Actual  % of Scrap  as Per Order'.
       when 'BOM_ORD_QTY'.
        wa_fcat-reptext = 'As per BOM Order Qty to be produce'.
       when 'QTY_AG%'.
        wa_fcat-reptext = '% Varation of order qty against BOM'.    "AS_PER_BOM_SCRP%
       when 'RM_COSUP' .
            wa_fcat-reptext = 'RM Consumption as per BOM'.
       when 'TOL_RM_COSUP'.
           wa_fcat-reptext = 'Tolerance for RM Consumption'.
       when 'DIFF_IN_RM'.
              wa_fcat-reptext = 'Diff in RM Consumtion btwn BOM & Actual in Qty (Kg)'.



        endcase.
    wa_fcat-colddictxt   = 'R'.
    wa_fcat-key          = space.
    modify : it_fcat from wa_fcat.
  endloop.

endform.

form read_lout.

  wa_lout-zebra       = 'X'.
  wa_lout-cwidth_opt  = 'X'.
  wa_lout-box_fname   = 'SELCT'.
  wa_lout-info_fname  = 'CLINE'.
  wa_lout-stylefname  = 'STYLE'.

endform.


form top_of_page.
  data :  wa_head type slis_listheader,
          it_head like table of wa_head.
  wa_head-typ  = 'H'.
  wa_head-info = 'List of Vendor Payment Documents'.
  append : wa_head to it_head.
  clear  : wa_head.

  call function 'REUSE_ALV_COMMENTARY_WRITE'
    exporting
      it_list_commentary = it_head.
endform.

send mail 
FORM send_mail .

LOOP AT it_disp into wa_disp.
if wa_disp-TOL_RM_COSUP le '5.00' and wa_disp-TOL_RM_COSUP ge '0.00' .
    delete it_disp WHERE mblnr = wa_disp-mblnr .
endif .
*if wa_disp-TOL_RM_COSUP ge '5.00-' and wa_disp-TOL_RM_COSUP ge '0.00' .
if  wa_disp-TOL_RM_COSUP BETWEEN '5.00-' and '0.00'.
    delete it_disp WHERE mblnr = wa_disp-mblnr .
endif .

ENDLOOP.


if it_disp is not INITIAL .

  DATA : wa_hdrd LIKE soodk,
         wa_addr TYPE string,
         wa_tadd TYPE sodm1.

  DATA : sp_succ TYPE boolean,
         sp_subj TYPE so_obj_des,
         to_addr TYPE string_table,
         cc_addr TYPE string_table.

  DATA : lv_reslt TYPE boolean,
         lv_uname TYPE sood-ownnam.

  DATA : it_para LIKE TABLE OF selc,
         it_parb LIKE TABLE OF soop1,
         it_tadd LIKE TABLE OF sodm1.

  DATA : wa_comp TYPE abap_compdescr,
         wa_xlsx LIKE alsmex_tabline.

  DATA : lv_index TYPE i,
         lv_srnum TYPE i,
         lv_ocode TYPE c,
         lv_cprog TYPE sy-cprog,
         lr_descr TYPE REF TO cl_abap_structdescr.
DATA: subject TYPE so_obj_des. "string.
  DATA : lv_xlsx TYPE string,
         lv_data TYPE string,
         lv_xrow TYPE string,
         lo_send TYPE REF TO cl_sapuser_bcs,
         lv_crlf TYPE c VALUE cl_abap_char_utilities=>newline,
         lv_ctab TYPE c VALUE cl_abap_char_utilities=>horizontal_tab.
 DATA: binary_content   TYPE solix_tab.
  DATA : it_scat TYPE slis_t_fieldcat_alv.

  DATA : wa_fcat TYPE lvc_s_fcat,
         it_fcat LIKE TABLE OF wa_fcat.

  FIELD-SYMBOLS <field>   TYPE any.
  FIELD-SYMBOLS <wa_disp> LIKE wa_disp.

  CONSTANTS : lv_excol TYPE string VALUE 'index,selct,srnum,style,selct,xicon'.
DATA: l_send_request   TYPE REF TO cl_bcs,                              " Send request
        l_body           TYPE bcsy_text,                                  " Mail body
        l_attach         TYPE bcsy_text,                                  " Attachment
        wa_text          TYPE soli,                                       " Work area for attach
        l_document       TYPE REF TO cl_document_bcs,                     " Mail body
        lo_sender        TYPE REF TO if_sender_bcs VALUE IS INITIAL,      " Sender address
        l_recipient      TYPE REF TO if_recipient_bcs,                    " Recipient
        l_recipient1     TYPE REF TO if_recipient_bcs,                    " Recipient
        l_email          TYPE ad_smtpadr,                                 " Email ID
        l_extension      TYPE soodk-objtp VALUE 'OTF',                    " TXT format
        l_size           TYPE so_obj_len,                      " Size of Attachment
        l_lines          TYPE i,
        lx_document_bcs  TYPE REF TO cx_document_bcs,
        lx_bcs_exception TYPE REF TO cx_bcs,
        lo_cdoc  type ref to cl_document_bcs,
        lx_cdoc  type ref to cx_document_bcs.

 loop at it_fcat into wa_fcat.
    search lv_excol for wa_fcat-fieldname.
    if sy-subrc <> 0.
      if lv_xlsx is not initial.
        concatenate lv_xlsx wa_fcat-reptext into lv_xlsx separated by lv_ctab.
      else.
        lv_xlsx = wa_fcat-reptext.
      endif.
    endif.
  endloop.
  lr_descr ?= cl_abap_typedescr=>describe_by_data( wa_disp ).
  loop at it_disp assigning <wa_disp>.
    clear : lv_xrow.
    loop at lr_descr->components into wa_comp.
      search lv_excol for wa_comp-name.
      if sy-subrc <> 0.
        assign component wa_comp-name of structure <wa_disp> to <field>.
        lv_data = <field>.
        if lv_xrow is not initial.
          concatenate lv_xrow lv_data into lv_xrow separated by lv_ctab.
        else.
          lv_xrow = lv_data.
        endif.
      endif.
    endloop.
    concatenate lv_xlsx lv_xrow into lv_xlsx separated by lv_crlf.
  endloop.
 sp_subj =   |'BOM PRD REPORT'|.
   perform read_body.
data : it_automail like table of zauto_mail,
       wa_automail like zauto_mail.
data :  dl_list  type SO_OBJ_NAM,
        it_bind type solix_tab,
        lv_size type sood-objlen,
          gv_xstring TYPE xstring.

    CALL FUNCTION 'HR_KR_STRING_TO_XSTRING'
    EXPORTING
      codepage_to      = '8300'
      unicode_string   = lv_xlsx
*     OUT_LEN          =
    IMPORTING
      xstring_stream   = gv_xstring
    EXCEPTIONS
      invalid_codepage = 1
      invalid_string   = 2
      OTHERS           = 3.

      IF sy-subrc <> 0.
*  Implement suitable error handling here
  ENDIF.
 SELECT      mandt
             prog_name
             bukrs
             werks
             frm_mailid
             dist_list
          FROM zauto_mail
          INTO TABLE it_automail
          where  prog_name EQ 'ZBOM_PRD'.

     CALL METHOD cl_bcs_convert=>xstring_to_solix
    EXPORTING
      iv_xstring = gv_xstring
    RECEIVING
      et_solix   = binary_content.
  TRY  .
read table it_automail into wa_automail index 1.
     dl_list = wa_automail-dist_list.

*    ******** Sender address code ***************
      lo_sender = cl_cam_address_bcs=>create_internet_address( 'nilkanth.more@simmondsmarshall.com' ).
      l_send_request = cl_bcs=>create_persistent( ).
      l_document = cl_document_bcs=>create_document(
                   i_type    = 'HTM'  "'RAW'
                   i_text    = it_body "l_body
                   i_subject = sp_subj ).


       l_document->add_attachment(
      i_attachment_type    = 'xls'
      i_attachment_subject = sp_subj
      i_attachment_size    = L_size
      i_att_content_hex    = binary_content ).



      CALL METHOD l_send_request->set_document( l_document ).

*** Set Distribution list for email ID's **
      l_recipient1 = cl_distributionlist_bcs=>getu_persistent(  i_dliname = dl_list
                                                                i_private = space ).
************ Reciepient address addition code ***********
      CALL METHOD l_send_request->add_recipient
        EXPORTING
          i_recipient  = l_recipient1
          i_express    = 'X'
          i_copy       = 'X'
          i_blind_copy = ' '
          i_no_forward = ' '.

      l_send_request->set_status_attributes( i_requested_status = 'E'  ).
*Send mail
      CALL METHOD l_send_request->send( ).
      COMMIT WORK AND WAIT.
      MESSAGE 'Mail Sent Successfully' TYPE 'S'.
    CATCH cx_bcs INTO lx_bcs_exception.

  ENDTRY.
  clear : wa_body, it_body.

endif .
ENDFORM .
*&---------------------------------------------------------------------*
*&      Form  READ_BODY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM read_body .

  wa_body = '<p>Dear Sir/Madam,</p>'.
  append wa_body to it_body.
  wa_body = space.
  append wa_body to it_body.
  wa_body = '<p>Please find attached report of data contains details of BOM Prd Report.</p>'.
  append wa_body to it_body.
  wa_body = space.
  append wa_body to it_body.
*  wa_body = '<p>Regard,</p>'.
*  append wa_body to it_body.
*  wa_body = '<p>SAP Team</p>'.
*  append wa_body to it_body.
*  wa_body = space.
*  append wa_body to it_body.
*  wa_body = space.
*  append wa_body to it_body.
*  wa_body = '<p>Note : This is auto generated Email, do not reply on this mail.</p>'.
*  append wa_body to it_body.

      wa_body = '<table width = "100%" border = "2" >'.
      APPEND wa_body TO it_body.
      CLEAR : wa_body.

      CONCATENATE  '<th align="Left" >' '<b>' '<font face="Verdana" size="1" COLOR="Black" >'
                  'Order NO' '</font> </td>' INTO wa_body.
      APPEND wa_body TO it_body.
      CLEAR : wa_body.

      CONCATENATE  '<th align="Left">' '<b>' '<font face="Verdana" size="1" COLOR="Black" >'
              'Type' '</font> </td>' INTO wa_body.
      APPEND wa_body TO it_body.
      CLEAR : wa_body.
*****
      CONCATENATE  '<th align="Left">' '<b>' '<font face="Verdana" size="1" COLOR="Black" >'
              'Material 101' '</font> </td>' INTO wa_body.
      APPEND wa_body TO it_body.
      CLEAR : wa_body.
            CONCATENATE  '<th align="Left">' '<b>' '<font face="Verdana" size="1" COLOR="Black" >'
              'Material 261' '</font> </td>' INTO wa_body.
      APPEND wa_body TO it_body.
      CLEAR : wa_body.

            CONCATENATE  '<th align="Left">' '<b>' '<font face="Verdana" size="1" COLOR="Black" >'
              'Tolerance for RM Consumo' '</font> </td>' '</tr>'INTO wa_body.

      APPEND wa_body TO it_body.
      CLEAR : wa_body.

LOOP AT it_disp into wa_disp.

            order_no     = wa_disp-aufnr .
            type         = wa_disp-AUART.
            material_101 =    wa_disp-matnr101.
            material_261 =    wa_disp-matnr261.
            toler_rm     =    wa_disp-TOL_RM_COSUP.

*        CONCATENATE '<tr style="background-color:#FFFFFF;"' '>'  INTO wa_body-line. APPEND wa_body TO it_body.

                CONCATENATE  '<tr style="background-color:#eeeeee;"><td>'
               Order_NO '</font> </td>'   INTO wa_body.
        APPEND wa_body TO it_body.
        CLEAR : wa_body.
                CONCATENATE  '<td>'
               type  '</td>'  INTO wa_body.
        APPEND wa_body TO it_body.
        CLEAR : wa_body.

                         CONCATENATE '<td>'
              material_101 '</td>'   INTO wa_body.
        APPEND wa_body TO it_body.
        CLEAR : wa_body.

                         CONCATENATE  '<td>'
               material_261 '</fo </td>'   INTO wa_body.
        APPEND wa_body TO it_body.
        CLEAR : wa_body.

                          CONCATENATE '<td>'
               toler_rm  ' </td>' '</tr>'  INTO wa_body.
        APPEND wa_body TO it_body.
        CLEAR : wa_body.



        CLEAR :  order_no    ,
                 type        ,
                 material_101,
                 material_261,
                 toler_rm    .
endloop .

      wa_body = '</table></br></br> </tbody> '.

      APPEND wa_body TO it_body.
      CLEAR : wa_body.
      wa_body = '<p>Regard,</p>'.
  append wa_body to it_body.
  wa_body = '<p>SAP Team</p>'.
  append wa_body to it_body.
  wa_body = space.
  append wa_body to it_body.
  wa_body = space.
  append wa_body to it_body.
  wa_body = '<p>Note : This is auto generated Email, do not reply on this mail.</p>'.
  append wa_body to it_body.
ENDFORM.
