*&---------------------------------------------------------------------*
*&  Include           ZQR_DRAFT_SUMMARY_DET
*&---------------------------------------------------------------------*
LOOP AT it_pallet into wa_pallet .
*     wa_disp-tot1   =  sy-tabix.
 READ TABLE it_makt into wa_makt with key matnr = wa_pallet-matnr .
 READ TABLE it_mara into wa_mara with key matnr = wa_pallet-matnr .
       wa_disp-COILNO =  wa_pallet-COILNO .
       wa_disp-PALID  =  wa_pallet-PALID  .
       wa_disp-MATNR  =  wa_pallet-MATNR  .
       wa_disp-LENGTH =  wa_pallet-LENGTH .
*       wa_disp-CSTAT  =  wa_pallet-CSTAT  .
       wa_disp-meins = wa_mara-meins .
       wa_disp-CDATE  =  wa_pallet-CDATE  .
       wa_disp-lgort  =  wa_pallet-lgort  .
       wa_disp-ctime  =  wa_pallet-ctime  .
       wa_disp-maktx  =  wa_makt-maktx    .

  gv_day   =  wa_pallet-cdate+6(2).
  gv_year  =  wa_pallet-cdate+0(4).
  gv_date  =  wa_pallet-cdate+4(2).
  concatenate gv_day gv_date gv_year into gv_date separated by '.'.
  wa_pallet-cdate = gv_date.
  gv_hr  = wa_pallet-ctime+0(2).
  gv_mnt = wa_pallet-ctime+4(2).
  gv_sec = wa_pallet-ctime+2(2).
  concatenate gv_hr gv_mnt gv_sec into gv_hr separated by ':'.
  wa_pallet-ctime = gv_hr.
  wa_disp-ctime  =  wa_pallet-ctime  .
  wa_disp-CDATE = wa_pallet-cdate .
   APPEND wa_disp to it_disp .
   CLEAR : wa_disp  ,GV_DAY , gv_year , gv_date , wa_mara, wa_makt.
  ENDLOOP.
SORT IT_DISP by PALID .



call function 'SSF_FUNCTION_MODULE_NAME'
    exporting
      formname           = 'ZQR_DRAFT_SUMMARY'
    importing
      fm_name            = FNAME
    exceptions
      no_form            = 1
      no_function_module = 2
      others             = 3.
data : it_loc type zqr_draft1 ,
      wa_loc type  zqr_draft.


if s_palid-option = 'BT' . "or s_date-option = 'BT' .  .

*LOOP AT it_disp INTO wa_disp .
*    wa_temp-coilno  =      wa_disp-COILNO .
*    wa_temp-PALID   =      wa_disp-PALID  .
*    wa_temp-MATNR   =      wa_disp-MATNR  .
*    wa_temp-LENGTH  =      wa_disp-LENGTH .
**   wa_temp-CSTAT   =      wa_disp-CSTAT  .
*    wa_temp-CDATE   =      wa_disp-CDATE  .
*    wa_temp-lgort   =      wa_disp-lgort  .
*    wa_temp-ctime   =      wa_disp-ctime  .
*    wa_temp-maktx   =      wa_disp-maktx  .
*    at last .
*      cnt = 2.
*    ENDAT .
* APPEND : wa_temp to it_temp  .
* at END OF palid  .
*LOOP AT it_temp into wa_temp.
*   LS_PARAMETERS-NO_OPEN  = 'X'.
*   LS_PARAMETERS-NO_CLOSE = 'X'.
* if cnt is INITIAL .
*    LS_PARAMETERS-NO_OPEN  = SPACE.
*    LS_PARAMETERS-NO_CLOSE = 'X'.
*    CLEAR cnt .
*    cnt  = CNT + 1 .
*  ENdif .
*if cnt gt 1 .
     LS_PARAMETERS-NO_DIALOG = 'X'.
    ls_parameters-PREVIEW   = 'X'.
*ENDif.
 CALL FUNCTION FNAME
 EXPORTING
    CONTROL_PARAMETERS         = LS_PARAMETERS
       OUTPUT_OPTIONS             = LS_OPTIONS
       USER_SETTINGS              = 'X'
*  IMPORTING
*    DOCUMENT_OUTPUT_INFO       =
*    JOB_OUTPUT_INFO            =
*    JOB_OUTPUT_OPTIONS         =
   TABLES
     IT_DISP                    = it_disp
*  EXCEPTIONS
*    FORMATTING_ERROR           = 1
*    INTERNAL_ERROR             = 2
*    SEND_ERROR                 = 3
*    USER_CANCELED              = 4
*    OTHERS                     = 5
           .
 IF SY-SUBRC <> 0.
* Implement suitable error handling here
 ENDIF.
*
*DATA :
*lv_errortab   TYPE tsferror.
* CLEAR  LS_PARAMETERS .
*      CALL FUNCTION 'SSF_READ_ERRORS'
*
*        IMPORTING
*
*          errortab = lv_errortab.
*clear : wa_temp.
*REFRESH : IT_TEMP .
*
*endloop .
*ENDAT.
*ENDLOOP.
ENDIF .
data : ckl type int4 .
if s_palid-option = 'EQ' ."or s_date-option = 'EQ' . . "" for single inp by Raman D zencon.
* LOOP AT it_disp INTO wa_disp .
*
*    wa_temp-coilno  =      wa_disp-COILNO .
*    wa_temp-PALID   =      wa_disp-PALID  .
*    wa_temp-MATNR   =      wa_disp-MATNR  .
*    wa_temp-LENGTH  =      wa_disp-LENGTH .
**   wa_temp-CSTAT   =      wa_disp-CSTAT  .
*    wa_temp-CDATE   =      wa_disp-CDATE  .
*    wa_temp-lgort   =      wa_disp-lgort  .
*    wa_temp-ctime   =      wa_disp-ctime  .
*    wa_temp-maktx   =      wa_disp-maktx  .
*    at last .
*      cnt = 2.
*    ENDAT .
* APPEND : wa_temp to it_temp  .
* at END OF palid  .
*LOOP AT it_temp into wa_temp.
*DESCRIBE TABLE s_palid[] LINES ckl.
*if ckl gt 1 .
*   LS_PARAMETERS-NO_OPEN  = 'X'.
*   LS_PARAMETERS-NO_CLOSE = 'X'.
* if cnt is INITIAL .
*    LS_PARAMETERS-NO_OPEN  = SPACE.
*    LS_PARAMETERS-NO_CLOSE = 'X'.
*    CLEAR cnt .
*    cnt  = CNT + 1 .
*  ENdif .
*if cnt gt 1 .
*    LS_PARAMETERS-NO_OPEN  = 'X'.
*    LS_PARAMETERS-NO_CLOSE = SPACE.
*ENDif.
*else.
    LS_PARAMETERS-NO_DIALOG = 'X'.
    ls_parameters-PREVIEW   = 'X'.
*endif .
CALL FUNCTION FNAME
 EXPORTING
       CONTROL_PARAMETERS         = LS_PARAMETERS
       OUTPUT_OPTIONS             = LS_OPTIONS
       USER_SETTINGS              = 'X'
* IMPORTING
*   DOCUMENT_OUTPUT_INFO       =
*   JOB_OUTPUT_INFO            =
*   JOB_OUTPUT_OPTIONS         =
  TABLES
    IT_DISP                    = it_disp
* EXCEPTIONS
*   FORMATTING_ERROR           = 1
*   INTERNAL_ERROR             = 2
*   SEND_ERROR                 = 3
*   USER_CANCELED              = 4
*   OTHERS                     = 5
          .
IF SY-SUBRC <> 0.
* Implement suitable error handling here
ENDIF.


 REFRESH : IT_TEMP .

*endloop .
*ENDAT.
*ENDLOOP.
ENDIF .
*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_DATA .
refresh :  it_fmap, lt_dmat, it_dynp.

  wa_fmap-fldname     = 'F001'.
  wa_fmap-dyfldname   = 'PALID'.
  append : wa_fmap to it_fmap.
   clear : wa_fmap.

*  wa_fmap-fldname     = 'F0002'.
*  wa_fmap-dyfldname   = 'MAKTX'.
*  append : wa_fmap to it_fmap.
*   clear : wa_fmap.


  wa_dynp-fieldname = 'S_DATE'.
  append : wa_dynp to it_dynp.

     call function 'DYNP_VALUES_READ'
    exporting
      dyname                               = sy-repid
      dynumb                               = sy-dynnr
    tables
      dynpfields                           = it_dynp
    exceptions
      invalid_abapworkarea                 = 1
      invalid_dynprofield                  = 2
      invalid_dynproname                   = 3
      invalid_dynpronummer                 = 4
      invalid_request                      = 5
      no_fielddescription                  = 6
      invalid_parameter                    = 7
      undefind_error                       = 8
      double_conversion                    = 9
      stepl_not_found                      = 10
      others                               = 11.


      if sy-subrc eq 0.
    read table it_dynp into wa_dynp with key fieldname = 'S_DATE'.
    if sy-subrc eq 0.
      REPLACE ALL OCCURRENCES OF '.' IN wa_dynp-fieldvalue WITH space.
      S_DATE = wa_dynp-fieldvalue.
*       S_DATE = REVERSE( S_DATE ) .  20240212   12022024
       gv_day   =   S_DATE+0(2).
       gv_year  =   S_DATE+4(4).
       gv_date  =   S_DATE+2(2).
  concatenate  gv_year gv_date gv_day  into s_date .
*      S_PALID = RT_IFRMT
    endif.

  endif.

SELECT
       PALID
       MATNR
  from ZQR_IPALLET into TABLE it_pal
  WHERE CDATE = S_DATE
  and CSTAT ne 'X'.

  LOOP AT it_pal INTO wa_PAL.
     ls_dmat-PALID  = wa_PAL-PALID.
     ls_dmat-Matnr  = wa_PAL-matnr.
     append : ls_dmat to lt_dmat.
     clear : ls_dmat.
  ENDLOOP.
SORT lt_dmat by palid .
DELETE ADJACENT DUPLICATES FROM lt_dmat comparing palid  .


call function 'F4IF_INT_TABLE_VALUE_REQUEST'
    exporting
      retfield               = 'PALID'
      dynpprog               = sy-repid
      dynpnr                 = sy-dynnr
      dynprofield            = 'S_PALID-LOW'
      window_title           = 'PALLET'
      value_org              = 'S'
      multiple_choice        = 'X'
    tables
      value_tab              = lt_dmat
      return_tab             = it_retn
      dynpfld_mapping        = it_fmap
    exceptions
      parameter_error        = 1
      no_values_found        = 2
      others                 = 3.

  if sy-subrc eq 0.
    if it_retn is not initial.
      loop at it_retn into wa_retn.
        case wa_retn-retfield.
          when 'S_PALID-LOW'.
            S_PALID-sign   = 'I'.
            S_PALID-option = 'EQ'.
            S_PALID-low = wa_retn-fieldval.
            append : S_PALID.
        endcase.
      endloop.
    endif.
  endif.


  read table it_retn into wa_retn with key retfield = 'S_PALID-LOW'.
  if sy-subrc eq 0.
    S_PALID-low = wa_retn-fieldval.
  endif.
  refresh : it_retn, it_fmap, lt_dmat.

ENDFORM.                    " GET_DATA
